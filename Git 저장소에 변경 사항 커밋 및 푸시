# blogGit 저장소에 변경 사항 커밋 및 푸시﻿
마지막 수정: 2024년 5월 14일
커밋 옵션 구성: 설정 | 버전 제어 | 커밋

커밋 도구 창
⌘
Сmd
00

저지르다
⌘
Сmd
0K

커밋하고 푸시하기
⌘
Сmd
⌥
Opt
0K

푸시
⌘
Сmd
⇧
Shift
0K

Git 저장소에 새 파일을 추가하거나 이미 Git 버전 제어에 있는 파일을 수정한 후 현재 상태에 만족하면 작업 결과를 공유할 수 있습니다. 여기에는 로컬에서 커밋하여 저장소의 스냅샷을 프로젝트 기록에 기록한 다음 원격 저장소에 푸시하여 다른 사람이 사용할 수 있도록 하는 것이 포함됩니다.

Git 사용자 이름을 설정하세요﻿
Git은 커밋을 ID와 연관시키기 위해 사용자 이름을 알아야 합니다. 사용자 이름을 설정하지 않은 경우 WebStorm은 변경 사항을 처음 커밋하려고 할 때 사용자 이름을 지정하라는 메시지를 표시합니다.

터미널 을 열고 다음 명령 중 하나를 실행하세요.

머신의 모든 Git 저장소에 대한 이름을 설정하려면 다음을 사용하세요.$ git config --global user.name "John Smith"

단일 저장소의 이름을 설정하려면 다음을 사용하십시오.$ git config user.name "John Smith"

변경 사항을 로컬에 커밋﻿
왼쪽에 있는 수직 커밋 도구 창을 엽니다.
⌘
Сmd
00

커밋 도구 창
변경 사항을 적용할 준비가 되면 해당 파일이나 전체 변경 목록을 선택합니다.

누르면 , 활성화된 변경 목록 전체가 선택됩니다.
⌘
Сmd
0K

버전 관리되지 않은 파일 노드 에서 파일을 선택할 수도 있습니다 . WebStorm은 이러한 파일을 한 단계로 준비 및 커밋합니다.

별도의 커밋을 만드는 대신 최신 커밋에 로컬 변경 사항을 추가 하려면 수정 옵션을 선택하세요.

커밋 메시지를 입력하세요. 커밋 메시지 기록 버튼최근 커밋 메시지 목록에서 클릭하여 선택할 수 있습니다.

커밋을 푸시하기 전에 나중에 커밋 메시지를 편집 할 수도 있습니다 .

버전 제어 | 설정의 커밋 페이지  에서 커밋 메시지 규칙을 사용자 지정할 수 있습니다 . 긴 줄을 래핑하거나 메시지를 다시 포맷하는 빠른 수정 및 Reformat 작업도 있습니다.
⌘
Сmd
0,

기본 커밋 메시지로 사용될 커밋 템플릿을 정의할 수도 있습니다. .txt 파일 에 사용할 보일러플레이트 텍스트를 지정 하고 터미널에서 다음 명령을 실행하여 Git 구성에 추가합니다.git config --local commit.template <path_to_template_file>

커밋 검사를 수행해야 하거나 커밋 후 서버에 파일을 업로드하거나 고급 옵션으로 커밋해야 하는 경우 기어 아이콘오른쪽 하단 모서리에 있는 을 클릭하세요.

고급 커밋 옵션 팝업
다음과 같은 옵션을 사용할 수 있습니다.

작성자 : 다른 사람이 변경한 내용을 커밋하는 경우 해당 변경 내용의 작성자를 지정할 수 있습니다.

커밋 승인 : 체크인하려는 변경 사항을 본인이 수행했다는 것을 증명하거나 커밋하는 코드에 대한 책임을 본인이 진다는 것을 나타내기 위해 커밋에 승인할지 여부를 선택하세요.

이 옵션을 활성화하면 다음 줄이 커밋 메시지 끝에 자동으로 추가됩니다. Signed off by: <username>

커밋 확인 영역 에서 선택한 파일을 로컬 저장소에 커밋하는 동안 WebStorm이 수행할 작업을 선택합니다.

다음과 같은 옵션을 사용할 수 있습니다.

코드 재포맷 : 프로젝트 코드 스타일 설정 에 따라 코드 포맷을 수행합니다 .

코드 재정렬 : 정렬 규칙 선호도 에 따라 코드를 재정렬합니다 .

가져오기 최적화 : 중복된 가져오기 명령문을 제거합니다.

코드 분석 : 수정된 파일을 커밋하는 동안 분석합니다. Choose profile을 클릭하여 IDE가 검사를 실행할 검사 프로필을 선택합니다 .

TODO 확인(<필터 이름>) : 지정된 필터와 일치하는 TODO 항목을 검토합니다. 구성을 클릭하여 기존 TODO 필터를 선택 하거나 TODO 설정 페이지를 열고 적용할 새 필터를 정의합니다.

정리 : 코드 정리 검사에서 일괄 적용 빠른 수정. 프로필 선택을 클릭하여 IDE가 검사를 실행할 프로필 을 선택합니다 .

테스트 실행 : 커밋 검사로 테스트를 실행합니다 . 테스트 실행 근처의 구성 선택을 클릭 하고 실행하려는 구성을 선택합니다.

저작권 업데이트 : 선택된 저작권 프로필 - 범위 조합에 따라 저작권 고지를 추가하거나 업데이트합니다 .

After Commit 영역 에서 커밋된 파일을 로컬 또는 원격 호스트, 마운트된 디스크 또는 디렉토리에 업로드하는 데 사용할 서버 액세스 구성 또는 서버 그룹을 선택할 수 있습니다 . 자세한 내용은 애플리케이션 배포를 참조하세요 .

다음과 같은 옵션을 사용할 수 있습니다.

도구 실행 : 선택한 변경 사항이 커밋된 후 WebStorm에서 실행하려는 외부 도구를 선택합니다 . 목록에서 도구를 선택하거나 찾아보기 버튼을 클릭하고 열리는 외부 도구찾아보기 버튼 대화 상자 에서 외부 도구를 구성할 수 있습니다 .

파일 업로드 : 로컬 또는 원격 호스트, 마운트된 디스크 또는 디렉토리에 커밋된 파일을 업로드하는 데 사용할 서버 액세스 구성 이나 서버 그룹을 선택합니다.

업로드를 중단하려면 없음을 선택하세요 .

목록에 서버 구성을 추가하려면 열리는 서버 추가찾아보기 버튼 대화 상자 에서 필수 필드를 클릭하고 입력합니다 .

이 목록은 FTP/SFTP/WebDAV 연결 플러그인이 활성화된 경우에만 사용할 수 있습니다 .

항상 선택된 서버 또는 서버 그룹 사용 : 항상 선택된 서버 나 서버 그룹 에 파일을 업로드합니다 .

FTP/SFTP/WebDAV 연결 플러그인이 활성화된 경우에만 체크박스를 사용할 수 있습니다 .

준비가 되면 Commit 또는 Commit and Push ( )를 클릭하여 커밋 직후에 변경 사항을 원격 저장소에 푸시합니다. 원격 저장소에 푸시되기 전에 현재 커밋과 다른 모든 커밋을 검토할 수 있습니다.
⌘
Сmd
⌥
Opt
0K

파일의 일부를 커밋합니다﻿
때때로 특정 작업과 관련된 변경을 할 때 동일한 파일에 영향을 미치는 다른 관련 없는 코드 수정도 적용합니다. 이러한 모든 변경 사항을 하나의 커밋에 포함하는 것은 검토, 되돌리기 , 체리픽 등이 더 어려울 수 있으므로 좋은 옵션이 아닐 수 있습니다.

WebStorm을 사용하면 다음 방법 중 하나를 사용하여 이러한 변경 사항을 개별적으로 커밋할 수 있습니다.

커밋에 포함하려는 수정된 코드 덩어리와 줄을 '변경 사항 커밋' 대화 상자에서 바로 선택하고, 다른 변경 사항은 보류 상태로 두어 나중에 커밋할 수 있습니다.

코드를 편집할 때 다양한 코드 덩어리를 다양한 변경 목록에 넣은 다음 , 이러한 변경 목록을 별도로 커밋합니다.

새로운 변경 목록을 만들어 활성화 하면, 그 이후에 변경한 모든 내용이 해당 변경 목록에 저장되고, 그 전에 변경한 내용은 그 자리에 그대로 유지됩니다.

커밋하려는 청크와 특정 라인을 선택하세요﻿
커밋 도구 창을 엽니다 .
⌘
Сmd
00

선택한 파일의 저장소 버전과 로컬 버전 간의 차이점을 표시하려면 커밋 도구 창 에서 도구 모음을 클릭 하거나 을 누릅니다 .
⌘
Сmd
00
Diff 아이콘
⌘
Сmd
0D

커밋하려는 수정 또는 새로 추가된 코드의 각 청크 옆에 있는 확인란을 선택하고 다른 변경 사항은 선택하지 않은 상태로 둡니다.

WebStorm: 부분 커밋 대화 상자
수정된 청크의 컨텍스트 메뉴에서 다른 변경 목록으로 이동을 선택하여 별도로 커밋할 수 있는 여러 변경 목록으로 변경 사항을 분할할 수도 있습니다 .

이 작업에 대한 사용자 정의 단축키를 지정하려면 설정의 키맵 페이지  에서 버전 제어 시스템 아래에 있는 '줄을 다른 변경 목록으로 이동' 작업 을 찾으세요 .
⌘
Сmd
0,

청크에서 특정 줄만 커밋하려면 포함할 줄을 마우스 오른쪽 버튼으로 클릭하고 청크 분할 및 선택한 줄을 커밋에 포함을 선택합니다 .

WebStorm: 컨텍스트 메뉴에서 커밋에 현재 줄을 포함하는 옵션
또는, 거터 위에 마우스를 올려놓고 커밋에 포함하거나 제외하려는 줄 옆의 확인란을 선택하거나 선택 취소합니다.

커밋을 클릭합니다 . 선택되지 않은 변경 사항은 현재 변경 목록에 남아 있으므로 별도로 커밋할 수 있습니다.

다양한 변경 목록에 변경 사항 넣기﻿
편집기에서 파일을 변경할 때는 여백에 있는 해당 변경 마커를 클릭합니다.

거터에 변경 마커가 없는 경우 설정의 버전 제어 | 확인 | 거터 페이지  에서 수정된 줄을 거터에서 강조 표시 옵션이 활성화되어 있는지 확인하세요 .
⌘
Сmd
0,

표시되는 도구 모음에서 수정된 코드 청크에 대한 대상 변경 목록을 선택합니다(또는 새 변경 목록을 만듭니다).

부분 커밋 변경 목록
각 변경 목록을 개별적으로 커밋합니다.

Git 스테이징 영역을 사용하여 변경 사항을 커밋하세요.﻿
수정된 파일이 자동으로 준비되는 변경 목록을 사용하는 대신 커밋을 위해 변경 사항을 준비한다는 개념에 더 익숙하다면 설정을 열고 버전 제어 | Git을 선택한 다음 준비 영역 사용 확인란을 선택하세요.
⌘
Сmd
0,

스테이징 영역 활성화
이제 커밋 도구 창 은 다음과 같이 표시됩니다.

Git 스테이징 영역
스테이징 영역을 사용하면 동일한 파일에 대한 변경 사항을 개별적으로 쉽게 커밋할 수 있으며(중복된 변경 사항 포함), 편집기에서 포커스를 전환하지 않고도 어떤 변경 사항이 이미 스테이징되었는지 확인할 수 있습니다.

변경 목록 사용에서 Git 스테이징 영역으로 전환하면 모든 기존 변경 목록이 저장됩니다. 변경 사항을 잃지 않고 두 모드 사이를 전환할 수 있습니다.

커밋을 위한 단계 변경﻿
다음 중 하나를 수행하세요.

전체 파일을 준비하려면 커밋 도구 창 에서 해당 파일을 선택하고 오른쪽 옆에 있는 을 클릭하거나 을 누르세요 .
⌘
Сmd
00
추가 버튼
⌘
Сmd
⌥
Opt
0A

커밋 도구 창에서 전체 파일을 스테이징합니다.
파일 내부의 특정 청크를 스테이징하려면 편집기에서 수정된 청크 옆의 여백에 있는 변경 마커를 클릭하고 스테이징을 클릭합니다 .

편집자로부터 변경 사항을 준비하세요
스테이징된 변경 사항(WebStorm 외부에서 스테이징된 변경 사항 포함)은 편집기에서 테두리 모양의 변경 마커로 표시됩니다.

단계적 변경을 위한 거터 마커
코드 청크 대신 한 줄과 같이 세부적인 변경 사항을 준비하거나 여러 변경 사항 중 하나를 한 줄에 적용하려면 커밋 도구 창 에서 변경 사항이 포함된 파일을 선택하고 상황에 맞는 메뉴에서 HEAD, 준비된 버전 및 로컬 버전 비교를 선택합니다 .
⌘
Сmd
00

스테이지 변경은 대화형으로 이루어집니다. Diff Viewer를 엽니다.
이렇게 하면 3방향 Diff Viewer가 열리는데 , 왼쪽 창에는 저장소 버전이 표시되고, 오른쪽 창에는 로컬 버전이 표시되며, 가운데 창은 원하는 변경 사항을 스테이징할 수 있는 모든 기능을 갖춘 편집기입니다.

무대는 상호작용적으로 변화합니다
준비가 되면 로컬에 변경 사항 커밋 에 설명된 대로 변경 사항을 커밋합니다 .

원격 저장소에 변경 사항 푸시﻿
변경 사항을 푸시하기 전에 원격과 동기화 하고, 충돌을 피하기 위해 저장소의 로컬 사본이 최신 상태인지 확인하세요.

WebStorm을 사용하면 모든 브랜치의 변경 사항을 추적된 브랜치 나 다른 원격 브랜치에 업로드할 수 있습니다 .

다음 중 하나를 수행하세요.

현재 브랜치 에서 변경 사항을 푸시하려면 를 누르 거나 메인 메뉴에서 Git | Push를 선택하세요.
⌘
Сmd
⇧
Shift
0K

원격이 있는 로컬 브랜치에서 변경 사항을 푸시하려면 브랜치 팝업에서 해당 브랜치를 선택하고 작업 목록에서 푸시를 선택합니다.

푸시 커밋 대화 상자가 열리고 모든 Git 저장소(다중 저장소 프로젝트용)가 표시되고 마지막 푸시 이후 각 저장소의 현재 브랜치에서 만들어진 모든 커밋이 나열됩니다.

동기적으로 제어되지 않는 여러 저장소를 사용하는 프로젝트가 있는 경우, 기본적으로 현재 저장소만 선택됩니다(동기 저장소 제어를 활성화하는 방법에 대한 자세한 내용은 버전 제어 설정: Git을 참조하세요 ).

선택한 커밋을 누르면 커밋 작성자, 시간, 해시, 커밋 메시지 등의 추가 정보가 표시됩니다.
F1

리포지토리에 원격이 없으면 Define remote 링크가 나타납니다. 이 링크를 클릭하고 열리는 대화 상자에서 원격 이름과 URL을 지정합니다. 저장되고 나중에 Git | Manage Remotes를 통해 편집할 수 있습니다(자세한 내용은 원격 리포지토리 추가 를 참조하세요 ).

푸시하려는 대상 브랜치를 수정하려면 브랜치 이름을 클릭하면 됩니다. 레이블은 기존 브랜치 이름을 입력하거나 새 브랜치를 만들 수 있는 텍스트 필드로 바뀝니다. 오른쪽 하단 모서리에 있는 Edit all targets 링크를 클릭하여 모든 브랜치 이름을 동시에 편집할 수도 있습니다.

로컬 브랜치는 변경할 수 없습니다. 선택한 각 저장소의 현재 브랜치가 푸시됩니다.

선택한 요소에 대해 또는 를 눌러 편집 모드로 전환할 수도 있습니다 .
↩
Enter
↩
Enter

원격 브랜치에 푸시하지 않고 커밋을 몇 개 만들었다면, Git 도구 창의 로그 탭 에서 푸시하려는 마지막 커밋을 선택하고 작업 목록에서 ' 여기까지 모두 푸시' 옵션을 선택하세요.

푸시 커밋 대화 상자가 열리고 선택한 커밋 해시까지의 모든 커밋이 표시됩니다.

변경 사항을 푸시하기 전에 미리 보고 싶다면 필요한 커밋을 선택하세요. 오른쪽 창에는 선택한 커밋에 포함된 변경 사항이 표시됩니다. 도구 모음 버튼을 사용하여 커밋 세부 정보를 검토할 수 있습니다.

커밋 작성자가 현재 사용자와 다른 경우 해당 커밋은 별표로 표시됩니다.

전체 저장소를 선택하면 모든 커밋의 모든 파일이 오른쪽 창에 나열됩니다.

같은 파일이 여러 커밋에서 수정된 경우, 해당 커밋이나 전체 저장소를 선택하면 한 번만 나열되고, 이 파일에 대해 Diff Viewer를 호출하면 모든 변경 사항이 함께 압축됩니다.

준비가 되면 푸시 버튼을 클릭 하고 드롭다운 메뉴에서 수행할 작업을 선택합니다: 푸시 또는 강제 푸시 (와 동일 push --force-with-lease).

이러한 선택 옵션은 현재 브랜치가 보호된 브랜치 필드에 나열되어 있지 않은 경우에만 사용할 수 있습니다( 버전 제어 설정: Git 참조 ). 그렇지 않은 경우에는 작업을 수행할 수만 있습니다 push.

푸시가 거부되면 작업 사본을 업데이트하세요.﻿
작업 사본이 오래되어 푸시가 거부 되면 WebStorm은 푸시 거부됨 대화 상자를 표시합니다. 단, 설정 대화 상자 의 Git 설정 페이지 에서 현재 브랜치의 푸시가 거부된 경우 자동 업데이트 옵션이 선택되지 않은 경우에 한합니다. 다음을 수행합니다.

프로젝트에서 여러 Git 저장소를 사용하는 경우 업데이트할 저장소를 지정합니다. 푸시가 거부되었는지 여부와 관계없이 모든 저장소를 업데이트하려면 모든 저장소 업데이트 옵션을 선택합니다. 이 옵션을 선택 취소하면 영향을 받는 저장소만 업데이트됩니다.

이 대화 상자에서 선택한 업데이트 방법을 사용하여 다음에 푸시가 거부될 때 WebStorm에서 업데이트 절차를 자동으로 적용하도록 하려면 ' 업데이트 방법 선택 사항을 기억하고 나중에 자동으로 업데이트' 옵션을 선택합니다.

이 대화 상자를 닫으면 설정 대화 상자의 Git 설정 페이지 에 있는 현재 브랜치의 푸시가 거부되면 자동 업데이트 체크박스가 선택되고, 적용된 업데이트 방법이 기본값이 됩니다.

업데이트 전략을 변경하려면 이 옵션의 선택을 해제하여 현재 브랜치의 푸시가 다음에 거부될 때 푸시 거부 대화 상자를 불러오고, 다른 업데이트 절차를 적용하고, 업데이트 방법 선택 기억 옵션을 다시 한 번 선택합니다.

각각 리베이스 또는 병합 버튼을 클릭하여 업데이트 방법( 리베이스 또는 병합 )을 선택합니다.

언제 강제 푸시를 사용해야 하나요?﻿
push를 실행하면 원격 저장소에 누락된 변경 사항이 있고 로컬 저장소 사본으로 덮어쓸 경우 Git은 작업을 완료하지 않습니다. 일반적으로 변경 사항으로 업데이트하기 전에 pull을 수행하여 원격 저장소와 동기화해야 합니다.

이 --force push명령은 이 검사를 비활성화하고 원격 저장소를 덮어쓸 수 있게 하여 기록을 지우고 데이터 손실을 일으킵니다. 후드 아래에서 강제 푸시를 선택하면 WebStorm이 작업을 수행하는데, push --force-with-lease이는 다른 사람의 커밋을 덮어쓰지 않도록 보장하는 데 도움이 되는 더 안전한 옵션입니다( 푸시 옵션에 대한 자세한 내용은 git push를 참조하세요).

여전히 수행해야 할 수 있는 상황 중 하나 --force push는 푸시된 브랜치를 리베이스한 다음 원격 서버에 푸시하려는 경우입니다. 이 경우 푸시를 시도하면 원격 참조가 로컬 참조의 조상이 아니기 때문에 Git이 변경 사항을 거부합니다. 이 상황에서 풀을 수행하면 브랜치의 사본 두 개가 생기고 이를 병합해야 합니다.
